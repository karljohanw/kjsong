#!/usr/bin/python

from operator import itemgetter
from itertools import product

blosum = {('X','X'): 1, ('U','U'): 1, ('X','U'): -2, ('U','X'): -2,
          ('X','Y'): 0, ('U','V'): 0, ('X','V'): -4, ('U','Y'): -4,
          ('Y','X'): 1, ('V','U'): 1, ('Y','U'): -4, ('V','X'): -4,
          ('Y','Y'): 1, ('V','V'): 1, ('Y','V'): -2, ('V','Y'): -2}

extra_note_penalty = -4
extra_melisma_penalty = -1

def needleman_wunsch_smith_waterman_westrin(lyric, music, sw=False):
    # (0=score, 1=used_syllables, 2=used_notes)
    m = len(lyric)+1 # Rows
    n = len(music)+1 # Columns
 
    M = [[(0,0,0)]*n for _ in range(m)]

    if not sw:
        for i in range(0, m):
            M[i][0] = (i * extra_note_penalty, 0, 0)
        for j in range(1, n):
            M[0][j] = (M[0][j-1][0] + (0 if music[j-1] in "VY" else extra_melisma_penalty),0,0)
 
    for i in range(1, m):
        for j in range(1, n):
            match_score = M[i-1][j-1][0] + blosum[(lyric[i-1], music[j-1])]
            delete_score = M[i-1][j][0] + extra_note_penalty
            insert_score = M[i][j-1][0] + (0 if music[j-1] in "VY" else extra_melisma_penalty)
            match = (match_score, M[i-1][j-1][1]+1, M[i-1][j-1][2]+1)
            delete = (delete_score, M[i-1][j][1]+1, M[i-1][j][2]+1)
            insert = (insert_score, M[i][j-1][1], M[i][j-1][2]+1)
            vector = [match, delete, insert]
            if sw: vector.append((0,0,0))
            M[i][j] = max(vector, key=itemgetter(0))
    if not sw:
        return M[m-1][n-1]
    else:
        return max([e for v in M for e in v], key=itemgetter(0))

def __generate_all_tune_metres(new_dict, dict, idx='full'):
    if idx not in new_dict:
        if '+' not in dict[idx] and '|' not in dict[idx]:
            new_dict[idx] = [dict[idx]]
        else:
            ret_val = []
            for alt in dict[idx].split('|'):
                this_far = ['']
                for merge in alt.split('+'):
                    __generate_all_tune_metres(new_dict, dict, merge)
                    this_far = [a+b for (a,b) in product(this_far, new_dict[merge])]
                ret_val += this_far
            new_dict[idx] = ret_val

def generate_all_tune_metres(dict):
    rval = {}
    __generate_all_tune_metres(rval, dict)
    return {key:value for key,value in rval.items() if key[0].islower()}
            
def tuple_get_max(tup_vec, len):
    for i in range(0,len):
        max_score = max(tup_vec, key=itemgetter(i))[i]
        tup_vec = [obj for obj in tup_vec if obj[i]==max_score]
    return tup_vec[0]

def compare_lyric_all_tune_metre(lyric, tune, extend=True):
    musics = generate_all_tune_metres(tune)
    rdict = []
    for key,music in musics.items():
        for m in music:
            rvec = []
            n=1
            while len(lyric)*n <= len(m) or not extend:
                (score, syll, note) = needleman_wunsch_smith_waterman_westrin(lyric*n, m, True)
                rvec.append((score/syll, syll/(len(lyric)*n), note/len(m), n, key))
                if not extend: break
                n=n+1
            if rvec: rdict.append(tuple_get_max(rvec, 4))
    if rdict:
        return tuple_get_max(rdict, 4)
    else:
        return None

def compare_two_tunes(tune01, tune02):
    musics1 = generate_all_tune_metres(tune01)
    musics2 = generate_all_tune_metres(tune02)
    rvec = []
    for k1,m1 in musics1.items():
        for k2,m2 in musics2.items():
            for a1 in m1:
                for a2 in m2:
                    (score, s1, s2) = needleman_wunsch_smith_waterman_westrin(a1, a2)
                    rvec.append((score/s1, s1/len(a1), s2/len(a2)))
    return tuple_get_max(rvec, 3)
                                 
#riego
riego="UXUUXUUXUUXUUXUUXUUXUUXUXUUXUUXUUXUUXUUXUUXUUXUXUUXUUXUUXUXUUXUUXUUX"

riego_dict = {}
riego_dict['A']="UXVYUUXUUXVYUUXUYUXVYUUXUUXVVUYUX"
riego_dict['B']="UXVYUUXUUXVYUUXUYUXVYUUXUUXVVUYUX"
riego_dict['C']="UXUYUXUUXUYUXUXUYUXUUXVVYUUX"
riego_dict['solo']="A+B|A+A+B"
riego_dict['coro']="C|C+C"
riego_dict['full']="solo+coro"

maame="UXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUX"

lunka_dict={}
lunka_dict['A']="UXUXUXUXUXUXUXUXUXUXUXUXUXUXUYVX"
lunka_dict['B']="XUXUXUXUX"
lunka_dict['C']="UUXUUXUUXUUXUXVYUYVXUX"
lunka_dict['solo']="A|A+A"
lunka_dict['coro']="B+B+C"
lunka_dict['full']="solo+coro"

verycommonmetre="XUXUXUXUXUXUXUX"
germanic="UXUXUXUUXUXUX"

haga_dict = {}
haga_dict['A']="XUXUXUXU"
haga_dict['B']="XUXUXUVX"
haga_dict['C']="XUXUXVYUX"
haga_dict['D']="XUXUXUXUXUXUXUVX"
haga_dict['full']="A+B+A+C+D+A+C"

kungs="UXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUXUX"

kungs_dict = {}
kungs_dict['uno']="UXUXUXUXUXUXUXUXUXUXUYVX"
kungs_dict['duo']="UXUXUXUXUXUXUXUXUXUXUXUXUXUXUX"
kungs_dict['full']="uno+duo"

maame_dict = {}
maame_dict['A']="UXUXUXUX"
maame_dict['B']="UXUXUX"
maame_dict['C']="UXUXVYUXUX"
maame_dict['D']="UXUXUXUX"
maame_dict['uno']="A+B"
maame_dict['duo']="C+C+D+B"
maame_dict['full']="uno+duo|uno+uno+duo|uno+duo+duo"

print(compare_lyric_all_tune_metre(riego, riego_dict, False))
print(compare_lyric_all_tune_metre(riego, lunka_dict, False))
print(compare_lyric_all_tune_metre(riego, maame_dict, False))
print(compare_lyric_all_tune_metre(riego, kungs_dict, False))
print(compare_lyric_all_tune_metre(riego, haga_dict, False))
print("Vaart land")
print(compare_lyric_all_tune_metre(maame, riego_dict, False))
print(compare_lyric_all_tune_metre(maame, lunka_dict, False))
print(compare_lyric_all_tune_metre(maame, maame_dict, False))
print(compare_lyric_all_tune_metre(maame, kungs_dict, False))
print(compare_lyric_all_tune_metre(maame, haga_dict, False))
print("Kungssaangen")
print(compare_lyric_all_tune_metre(kungs, riego_dict, False))
print(compare_lyric_all_tune_metre(kungs, lunka_dict, False))
print(compare_lyric_all_tune_metre(kungs, maame_dict, False))
print(compare_lyric_all_tune_metre(kungs, kungs_dict, False))
print(compare_lyric_all_tune_metre(kungs, haga_dict, False))
print("VCM")
print(compare_lyric_all_tune_metre(verycommonmetre, riego_dict))
print(compare_lyric_all_tune_metre(verycommonmetre, lunka_dict))
print(compare_lyric_all_tune_metre(verycommonmetre, maame_dict))
print(compare_lyric_all_tune_metre(verycommonmetre, kungs_dict))
print(compare_lyric_all_tune_metre(verycommonmetre, haga_dict))
print("===================================")
print(compare_two_tunes(maame_dict, kungs_dict))
